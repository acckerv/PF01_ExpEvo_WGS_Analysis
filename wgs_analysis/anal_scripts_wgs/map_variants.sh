set -e #exit script if there is an error

export PATH="$PATH:/home/runcklesslab/software/bcftools-1.9"

echo Provide full path for files you want analyzed. This should be the path to the directory containing the trimmed fastq files
read directory  #save path to variable
cd $directory  #cd into correct directory
ls .  #test to make sure the correct files are given

echo Provide full path of reference genome. This should be the path to the indexed ".fa" file generated by indexing the wgs of your organism
read genome
head $genome -n 5 #test to make sure the correct reference genome is provided

mkdir -p sam bam dedup vcf  #make the required directories to keep file organized


for sample in *1.trim.fastq.gz
do
        echo "working with sample $sample" #print which file you are working with

        base=$(basename $sample 1.trim.fastq.gz)
        echo "base name is $base" #print basename to terminal

        fq1=${base}1.trim.fastq.gz #full path for file1
        fq2=${base}2.trim.fastq.gz #full path for file2

        sam=sam/${base}.aligned.sam #sam file name and location
        bam=bam/${base}.aligned.bam #bam file name and location

	dedup=dedup/${base}_dedup.bam #deduplicated reads file name and location
	dedupstats=dedup/${base}_dedupstats.txt #deduplication statistics filename and location
	dedup_sorted_bam=bam/${base}.dedup.aligned.sorted.bam #sorted bam file name and location

        variants=vcf/${base}_variants.vcf #vcf file name and location
        stats=vcf/${base}_variant_info.txt #final variants filename and location


        bwa  mem -t 4 $genome $fq1 $fq2 > $sam #align reads to genome, redirect to sam file; -t 4 used to speed up alignment by utilizing 4 threads
        echo aligned to genome

        samtools view -S -b $sam > $bam #compress sam file to bam file
        echo compressed sam file

	samtools collate $bam -o collate.bam
	echo bam file collated

	samtools fixmate -m collate.bam fixmate.bam #Add ms and MC tags for markdup to use later:
	echo collated file tagged

	samtools sort fixmate.bam -o positionsort.bam #Markdup needs position order
	echo Assigned position order

	samtools markdup -rS positionsort.bam $dedup -f $dedupstats # -r remove duplicates; -S Mark supplementary reads of duplicates as duplicates; -f Write stats to named file.
	echo deduplication successful 

	rm collate.bam
	rm fixmate.bam
	rm position*sort.bam
	echo Removed deduplication intermediate files

        samtools sort $dedup -o $dedup_sorted_bam  #sort bam file
        echo bam file sorted

        samtools index $dedup_sorted_bam #index sorted bam file 
        echo bam file indexed

done


rm -r sam bam dedup
echo removed intermediate files


echo "All Done"
